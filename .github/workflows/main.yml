name: Spring Boot CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/springboot:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            echo "Pulling latest docker image..."
            docker compose pull springboot-app
            
            echo "Starting new container..."
            docker compose up -d --no-deps springboot-app
            
            echo "Waiting for application to start..."
            sleep 15 # 애플리케이션이 시작될 때까지 15초 정도 대기 (시간은 조절 필요)
            
            echo "Checking container status..."
            # docker ps -f "name=컨테이너_이름" 명령어로 상태를 확인하고, Up이 아니면 워크플로우를 실패 처리
            if [ "$(docker ps -q -f name=my-spring-container)" ]; then
            echo "Deployment successful!"
            else
            echo "Deployment failed! Container is not running."
            # 실패한 컨테이너의 로그를 출력하여 원인 파악을 쉽게 함
            docker logs "$(docker ps -a -q -f name=my-spring-container | head -n 1)"
            exit 1
            fi
            
            echo "Cleaning up old images..."
            docker image prune -f